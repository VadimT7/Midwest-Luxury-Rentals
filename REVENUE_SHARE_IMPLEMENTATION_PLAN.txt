## Build Brief — “Billing & Payouts” with Stripe Connect + Billing ### Objectives 1. **Automatic revenue share on every booking** (e.g., 7% during Performance, then 2%/1% per plan) with no manual chasing. 2. **Self-serve merchant onboarding** to Stripe **Connect Express** (KYC, bank account, payouts). 3. **SaaS subscriptions** (Starter/Pro, USD) billed by the platform. 4. **Performance plan** = $0 today, store card **on file** (Setup Intent) + take rev-share from each booking. 5. **Security deposit support** (authorization/capture/release) for rentals. 6. **Refunds & disputes** handled correctly with destination charges. 7. **Plan switching** and automatic fee logic changes after the first 60 days. --- ## Information Architecture (Admin Dashboard) Create a top-level section **Billing & Payouts** (separate from general Settings), with tabs: 1. **Overview** (tenant-level KPIs): MTD bookings, GMV, your fees taken, next payout date (from Stripe), plan, days left in Performance window. 2. **Payouts (Merchant)**: Connect Express onboarding/health, bank account status, payout schedule, link to Stripe Express Dashboard. 3. **Subscriptions (SaaS)**: current plan (Performance/Starter/Pro), billing email, invoices, card on file (for SaaS), upgrade/downgrade controls. 4. **Booking Fees**: fee schedule preview (Performance = 7% for 60 days, then plan fees), effective dates, toggle per-booking fee (if Starter/Pro use 0–2%). 5. **Deposits & Refunds**: policy defaults (deposit amount/percent), open authorizations, capture/refund actions. 6. **Invoices & Receipts**: SaaS invoices (platform) + customer booking receipts (merchant). 7. **Settings**: tax configuration (for SaaS), statements descriptors, support emails, legal. **CTA hierarchy on first visit**: * Step 1: “Get Paid — Connect Payouts” (Connect Express onboarding) * Step 2: “Choose Plan” (or confirm Performance) * Step 3: “Add Card on File” (Performance SetupIntent; Starter/Pro via Checkout) --- ## Data Model (conceptual; adapt to your DB) * **Tenant** { id, name, country, currency, created_at, ... } * **TenantBillingProfile** { tenant_id(FK), plan: 'PERFORMANCE'|'STARTER'|'PRO'|'DIY', plan_started_at, performance_ends_at, stripe_customer_id (platform), stripe_payment_method_id (platform; optional), stripe_sub_id (Starter/Pro), fee_percent_current (e.g., 7), fee_percent_after (e.g., 2 or 1), fee_minimum_cents (optional), card_on_file: bool } * **TenantStripeConnect** { tenant_id(FK), stripe_account_id, onboarding_status: 'pending'|'complete'|'restricted', payouts_enabled: bool, requirements: json, last_checked_at } * **Booking** { id, tenant_id, customer_id, car_id, start_at, end_at, base_price_cents, add_ons_cents, tax_cents, deposit_cents, total_cents, currency, stripe_payment_intent_id, stripe_payment_intent_deposit_id (optional), status: 'reserved'|'paid'|'completed'|'refunded'|'disputed', created_at } * **BookingFeeLedger** { booking_id, tenant_id, application_fee_cents, fee_percent_applied, plan_snapshot, created_at } * **WebhookEventLog** { id, type, payload, processed: bool, created_at } * **AuditLog** { actor, action, entity, before, after, at } --- ## Stripe Configuration (Platform) * Enable **Stripe Connect (Express)**. * Enable **Stripe Billing** for your SaaS plans (USD). * Set **default currency** for SaaS = USD. Booking currency = tenant’s local currency if supported by Stripe; otherwise USD. * Define **Prices** in Stripe: price_starter_monthly, price_starter_annual, price_pro_monthly, price_pro_annual. * Define **Product** “Sapphire Drive Booking” for marketplace charges (just metadata). --- ## Merchant Onboarding (Payouts) **Goal:** Merchant completes KYC and links a bank account via **Connect Express**. **Flow (Payouts tab):** 1. If stripe_account_id missing → “Connect Payouts” button. 2. Create a **Connect Express account** server-side (type: 'express') with country from tenant, capabilities: card_payments, transfers. 3. Generate **Account Link** (onboarding). Redirect the merchant to Stripe. 4. On return, poll account status (capabilities + requirements). Persist to TenantStripeConnect. 5. Show status: **Ready** / **Incomplete** / **Restricted** with exact missing items. 6. Provide “Open Stripe Express Dashboard” deep link for self-serve updates. **Acceptance:** Merchant can see “Payouts Enabled: Yes” and a next payout date. --- ## Plan Selection & Fee Logic * Default new tenants to **Performance**: fee_percent_current=7, performance_ends_at = plan_started_at + 60 days, fee_percent_after determined by chosen post-period plan (Starter=2, Pro=1). * Allow switching to **Starter** or **Pro** at any time via Subscriptions tab: launches Stripe Checkout (subscription). On success, set plan, store stripe_sub_id, update fee rules (performance ends immediately or continue until 60-day mark—choose one policy and display it clearly). * **DIY** plan sets marketplace fee to 0–? (usually **0**), disables checkout/admin features accordingly. --- ## Performance Plan — Card on File * Provide **“Add Card on File”** CTA (if not already stored from landing page). * Create **Setup Intent** on platform customer; collect payment method; **no charge now**. * Save stripe_customer_id + stripe_payment_method_id. * Use this card only for: future plan upgrades (Starter/Pro), optional minimum fees, or failed fee recovery (if you ever need it). Primary comp on Performance is the application fee on each booking. --- ## Booking Checkout — Destination Charge with Application Fee **Every booking uses a single PaymentIntent created by the platform with:** * amount = total_cents (base + add-ons + tax, exclude deposit if using separate auth). * currency = booking.currency. * on_behalf_of = <tenant.stripe_account_id> * transfer_data[destination] = <tenant.stripe_account_id> * application_fee_amount = round(amount * fee_percent_active) * receipt_email = customer.email * **Idempotency key** = booking:{id} * Confirm the PaymentIntent on client side. **Active Fee Percent Calculation** * If plan = PERFORMANCE and now <= performance_ends_at → **7%** * Else if plan = STARTER → **2%** (or **0%** if you choose pure SaaS) * Else if plan = PRO → **1%** (or **0%**) * Persist a **fee snapshot** in BookingFeeLedger for audits. **Refunds / Cancellations** * Refund the original PaymentIntent. Stripe automatically prorates **application_fee** back to platform. Update Booking + Ledger. **Disputes** * Listen to charge.dispute.created. * Surface deadline and evidence checklist in UI; provide “Open Stripe Dashboard” link (merchant). * Track dispute.closed outcomes and adjust ledger. --- ## Security Deposits (Optional but strongly recommended) Two options (pick one globally to keep UX simple): **Option A — Separate Authorization** * Create a second PaymentIntent **for deposit only** with capture_method: 'manual', same on_behalf_of and transfer_data. * On return without incident: **cancel** the deposit PI (releases hold). * On damage/fees: **capture partial or full** amount; record in Booking. **Option B — Add deposit to total then refund difference** (simpler but messier on statements; prefer A for exotics). --- ## SaaS Subscriptions (Starter/Pro, USD) **Subscriptions tab:** * Buttons: “Start Starter”, “Start Pro” → create Stripe **Checkout Session** (subscription mode) with price IDs, success/cancel URLs. * On checkout.session.completed (mode=subscription): store stripe_sub_id, plan, update fee rules (drop Performance fees as per policy). * Show invoices and payment method for SaaS; allow **cancel at period end** and **plan upgrade/downgrade** (proration OK). --- ## Webhooks (Platform endpoint) Create one secure webhook route; store and process events idempotently: **Connect / Account** * account.updated → refresh payouts_enabled and requirements. * capability.updated → same. **Payments (Marketplace)** * payment_intent.succeeded → mark Booking paid; write BookingFeeLedger row (amount + fee). * payment_intent.payment_failed → mark Booking failed; surface to merchant. * charge.refunded / charge.refund.updated → sync refunds. * charge.dispute.created / closed → mark Booking disputed/resolved. **Subscriptions (SaaS)** * checkout.session.completed (subscription) → attach stripe_sub_id, set plan. * invoice.payment_succeeded / failed → reflect subscription status; notify tenant on failure with update payment method CTA. * customer.subscription.updated / deleted → sync plan state. **Performance Card on File** * setup_intent.succeeded → mark card_on_file=true. **Log all** to WebhookEventLog and guard with idempotency. --- ## Taxes * **SaaS (your platform):** enable **Stripe Tax** or set fixed tax rules by region; display on invoices. * **Bookings (merchants):** allow tenant to configure tax rules and pass automatic_tax if supported; otherwise compute and include tax in amount. Keep you out of their tax liability by using on_behalf_of + destination. --- ## Fraud & Risk * Enable 3DS where required; allow tenants to require ID upload (out of scope here). * For high-risk amounts, set payment_intent.setup_future_usage='off_session' for returns/incidental charges (optional). * Store and display AVS/CVC results to merchant for edge cases. --- ## UX Copy (keep it human) * **Payouts empty state:** “Get paid automatically. Connect your payout account (2 minutes). Stripe handles verification & deposits.” * **Performance card on file:** “We store a card to activate your account. **No charge today.** Rev-share comes from bookings.” * **Fee banner:** “You’re on **Performance**: 7% per booking until **{date}**, then **{plan}** fees apply.” --- ## Access Control & Audit * Only tenant owners can access **Payouts** and **Subscriptions**. * Log every change (plan, fees, bank updates) in **AuditLog**. --- ## Error States (surface, don’t hide) * If payouts disabled: banner with reason and “Open Stripe Express Dashboard”. * If Connect onboarding incomplete: block booking checkout and show action card. * If webhooks fail: admin-only alert with retry info. --- ## Edge Cases & Policies * **Unsupported Stripe Connect countries:** block onboarding with a clear message and a waitlist capture. Do **not** attempt workarounds that make you a money transmitter. * **Plan change mid-Performance:** choose one policy: * (Recommended) **Immediate switch** to Starter/Pro fees on successful subscription purchase; Performance window ends. * Or honor Performance window to the end date; document it. * **Minimum fee floor (optional):** allow setting a per-booking minimum (e.g., $5) to avoid tiny-fee bleed. --- ## Acceptance Tests (must pass before shipping) 1. **Onboarding:** Create tenant → Connect Express → see payouts enabled + next payout date. 2. **Performance start:** Add card on file; fee banner shows 7% and correct end date. 3. **Booking charge:** Create booking → PaymentIntent with on_behalf_of, transfer_data.destination, application_fee_amount = 7% → success → ledger row created. 4. **Refund:** Refund booking → ledger reverses proportionally; tenant sees refund in history. 5. **Dispute:** Simulate dispute event → dashboard surfaces deadline + evidence link; status updates on closed. 6. **Deposit auth & release:** Create manual-capture PI for deposit; cancel to release; or capture partial and reflect in ledger. 7. **Upgrade to Starter:** Checkout → subscription active → plan set to Starter → new booking uses **2%** application fee. 8. **Downgrade to DIY:** Features locked as expected; no application fee (or as configured). 9. **Webhook resilience:** Duplicate events ignored (idempotent); failures retried; logs populated. 10. **Permissions:** Non-owners can’t access Payouts/Subscriptions. --- ## Deliverables * Admin UI for all tabs described, with real status badges and deep links to Stripe Express. * Server routes for: create Connect account & account link; create SetupIntent (card on file); create Checkout Session (subscriptions); create PaymentIntent (bookings); refund; deposit capture/cancel. * Webhook processor with idempotency + logs. * Config for plan fee schedule and Performance window. * Readme for environment variables (Stripe keys, price IDs) and how to set test/live modes. ---