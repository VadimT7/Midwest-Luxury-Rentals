generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model AddOn {
  id               String         @id
  slug             String         @unique
  name             String
  description      String?
  category         AddOnCategory
  priceType        PriceType
  price            Decimal        @db.Decimal(10, 2)
  currency         String         @default("EUR")
  icon             String?
  imageUrl         String?
  order            Int            @default(0)
  maxQuantity      Int?
  requiresApproval Boolean        @default(false)
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  BookingAddOn     BookingAddOn[]

  @@index([category])
  @@index([isActive])
}

model AuditLog {
  id        String   @id
  actor     String
  actorType String   @default("user")
  action    String
  entity    String
  entityId  String?
  before    Json?
  after     Json?
  ipAddress String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([actor])
  @@index([createdAt])
  @@index([entity, entityId])
}

model Availability {
  id          String   @id
  carId       String
  date        DateTime @db.Date
  isAvailable Boolean  @default(true)
  reason      String?
  Car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([carId, date])
  @@index([carId])
  @@index([date])
}

model Booking {
  id              String         @id
  bookingNumber   String         @unique
  userId          String
  guestEmail      String?
  guestName       String?
  guestPhone      String?
  guestLicense    String?
  carId           String
  startDate       DateTime
  endDate         DateTime
  pickupType      PickupType
  returnType      PickupType
  pickupLocation  String?
  returnLocation  String?
  deliveryAddress String?
  deliveryFee     Decimal?       @db.Decimal(10, 2)
  basePriceTotal  Decimal        @db.Decimal(10, 2)
  addOnsTotal     Decimal        @default(0) @db.Decimal(10, 2)
  feesTotal       Decimal        @default(0) @db.Decimal(10, 2)
  taxTotal        Decimal        @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal        @db.Decimal(10, 2)
  currency        String         @default("EUR")
  status          BookingStatus  @default(PENDING)
  paymentStatus   PaymentStatus  @default(PENDING)
  includedKm      Int
  startMileage    Int?
  endMileage      Int?
  extraKmCharge   Decimal?       @db.Decimal(10, 2)
  customerNotes   String?
  internalNotes   String?
  confirmedAt     DateTime?
  cancelledAt     DateTime?
  completedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  Car             Car            @relation(fields: [carId], references: [id])
  User            User           @relation(fields: [userId], references: [id])
  BookingAddOn    BookingAddOn[]
  Contract        Contract?
  DamageReport    DamageReport?
  Notification    Notification[]
  Payment         Payment[]

  @@index([bookingNumber])
  @@index([carId])
  @@index([startDate, endDate])
  @@index([status])
  @@index([userId])
}

model BookingAddOn {
  id         String  @id
  bookingId  String
  addOnId    String
  quantity   Int     @default(1)
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  AddOn      AddOn   @relation(fields: [addOnId], references: [id])
  Booking    Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([bookingId, addOnId])
}

model BookingFeeLedger {
  id                  String               @id @default(cuid())
  bookingId           String
  tenantId            String
  applicationFeeCents Int
  feePercentApplied   Decimal              @db.Decimal(5, 2)
  planSnapshot        BillingPlan
  bookingAmountCents  Int
  currency            String
  stripeTransferId    String?
  stripeBalanceTxnId  String?
  refundedCents       Int                  @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  tenantBilling       TenantBillingProfile @relation(fields: [tenantId], references: [tenantId])

  @@index([bookingId])
  @@index([tenantId])
  @@index([createdAt])
}

model Car {
  id              String           @id
  slug            String           @unique
  make            String
  model           String
  year            Int
  trim            String?
  vin             String?
  licensePlate    String?
  displayName     String
  description     String
  featured        Boolean          @default(false)
  featuredOrder   Int?
  status          CarStatus        @default(ACTIVE)
  category        CarCategory
  bodyType        BodyType
  transmission    TransmissionType
  fuelType        FuelType
  drivetrain      DrivetrainType
  seats           Int
  doors           Int
  engineSize      Float?
  engineType      String?
  horsePower      Int?
  torque          Int?
  topSpeed        Int?
  acceleration    Float?
  fuelConsumption Float?
  features        Json
  primaryImageUrl String?
  threeDModelUrl  String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  Availability    Availability[]
  Booking         Booking[]
  CarImage        CarImage[]
  Maintenance     Maintenance[]
  PriceRule       PriceRule[]

  @@index([category])
  @@index([featured])
  @@index([status])
}

model CarImage {
  id        String   @id
  carId     String
  url       String
  alt       String?
  caption   String?
  order     Int      @default(0)
  isGallery Boolean  @default(true)
  createdAt DateTime @default(now())
  Car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@index([carId])
}

model Contract {
  id           String    @id
  bookingId    String    @unique
  documentUrl  String
  signedAt     DateTime?
  signerName   String?
  signerEmail  String?
  signatureUrl String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime  @default(now())
  Booking      Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Coupon {
  id               String       @id
  code             String       @unique
  description      String?
  discountType     DiscountType
  discountValue    Decimal      @db.Decimal(10, 2)
  minimumAmount    Decimal?     @db.Decimal(10, 2)
  maximumDiscount  Decimal?     @db.Decimal(10, 2)
  usageLimit       Int?
  usageCount       Int          @default(0)
  validFrom        DateTime
  validUntil       DateTime
  isActive         Boolean      @default(true)
  applicableCarIds String[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime

  @@index([code])
  @@index([isActive])
}

model DamageReport {
  id                   String    @id
  bookingId            String    @unique
  preInspectionNotes   String?
  preInspectionPhotos  Json?
  preInspectionDate    DateTime?
  postInspectionNotes  String?
  postInspectionPhotos Json?
  postInspectionDate   DateTime?
  damageDescription    String?
  estimatedCost        Decimal?  @db.Decimal(10, 2)
  chargedAmount        Decimal?  @db.Decimal(10, 2)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  Booking              Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model DepositAuthorization {
  id                    String        @id
  bookingId             String        @unique
  stripePaymentIntentId String        @unique
  amountCents           Int
  currency              String
  status                DepositStatus @default(AUTHORIZED)
  capturedCents         Int           @default(0)
  releasedAt            DateTime?
  capturedAt            DateTime?
  expiresAt             DateTime
  metadata              Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime

  @@index([bookingId])
  @@index([status])
}

model Dispute {
  id                 String        @id
  bookingId          String
  stripeDisputeId    String        @unique
  amount             Int
  currency           String
  reason             String
  status             DisputeStatus
  evidenceDueBy      DateTime?
  evidenceDetails    Json?
  isChargeRefundable Boolean       @default(true)
  metadata           Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime

  @@index([bookingId])
  @@index([evidenceDueBy])
  @@index([status])
}

model Maintenance {
  id            String          @id
  carId         String
  type          MaintenanceType
  description   String
  scheduledDate DateTime
  completedDate DateTime?
  cost          Decimal?        @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  Car           Car             @relation(fields: [carId], references: [id])

  @@index([carId])
  @@index([scheduledDate])
}

model Notification {
  id            String              @id
  userId        String?
  bookingId     String?
  channel       NotificationChannel
  type          NotificationType
  subject       String?
  content       String
  metadata      Json?
  status        NotificationStatus  @default(PENDING)
  sentAt        DateTime?
  failedAt      DateTime?
  failureReason String?
  createdAt     DateTime            @default(now())
  Booking       Booking?            @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  User          User?               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([status])
  @@index([userId])
}

model Payment {
  id                    String                   @id
  bookingId             String
  stripePaymentIntentId String?                  @unique
  stripeChargeId        String?
  stripeRefundId        String?
  amount                Decimal                  @db.Decimal(10, 2)
  currency              String                   @default("EUR")
  type                  PaymentType
  method                PaymentMethodType
  status                PaymentTransactionStatus
  description           String?
  metadata              Json?
  failureReason         String?
  processedAt           DateTime?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime
  Booking               Booking                  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([status])
  @@index([stripePaymentIntentId])
}

model PaymentMethod {
  id                    String   @id
  userId                String
  stripePaymentMethodId String   @unique
  type                  String
  card                  Json?
  isDefault             Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime
  User                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PriceRule {
  id                String         @id
  carId             String
  basePricePerDay   Decimal        @db.Decimal(10, 2)
  currency          String         @default("EUR")
  weekendMultiplier Decimal        @default(1.0) @db.Decimal(3, 2)
  weeklyDiscount    Decimal        @default(0.0) @db.Decimal(3, 2)
  monthlyDiscount   Decimal        @default(0.0) @db.Decimal(3, 2)
  minimumDays       Int            @default(1)
  maximumDays       Int?
  includedKmPerDay  Int            @default(200)
  extraKmPrice      Decimal        @db.Decimal(10, 2)
  depositAmount     Decimal        @db.Decimal(10, 2)
  validFrom         DateTime       @default(now())
  validUntil        DateTime?
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime
  Car               Car            @relation(fields: [carId], references: [id], onDelete: Cascade)
  SeasonalRate      SeasonalRate[]

  @@index([carId])
  @@index([isActive])
}

model SeasonalRate {
  id          String    @id
  priceRuleId String
  name        String
  startDate   DateTime
  endDate     DateTime
  multiplier  Decimal   @db.Decimal(3, 2)
  PriceRule   PriceRule @relation(fields: [priceRuleId], references: [id], onDelete: Cascade)

  @@index([priceRuleId])
  @@index([startDate, endDate])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SystemSettings {
  id          String   @id
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
}

model TenantBillingProfile {
  id                    String               @id @default(cuid())
  tenantId              String               @unique
  plan                  BillingPlan          @default(PERFORMANCE)
  planStartedAt         DateTime             @default(now())
  performanceEndsAt     DateTime?
  stripeCustomerId      String?              @unique
  stripePaymentMethodId String?
  stripeSubscriptionId  String?
  feePercentCurrent     Decimal              @default(7.0) @db.Decimal(5, 2)
  feePercentAfter       Decimal              @default(2.0) @db.Decimal(5, 2)
  feeMinimumCents       Int?
  cardOnFile            Boolean              @default(false)
  billingEmail          String?
  taxId                 String?
  country               String?
  currency              String               @default("USD")
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  connectAccount        TenantStripeConnect?
  feeLedger             BookingFeeLedger[]

  @@index([plan])
  @@index([performanceEndsAt])
}

model TenantStripeConnect {
  id               String                  @id @default(cuid())
  tenantId         String                  @unique
  stripeAccountId  String                  @unique
  onboardingStatus ConnectOnboardingStatus @default(PENDING)
  payoutsEnabled   Boolean                 @default(false)
  chargesEnabled   Boolean                 @default(false)
  detailsSubmitted Boolean                 @default(false)
  requirements     Json?
  lastCheckedAt    DateTime                @default(now())
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  tenantBilling    TenantBillingProfile    @relation(fields: [tenantId], references: [tenantId])

  @@index([stripeAccountId])
  @@index([onboardingStatus])
}

model Testimonial {
  id          String    @id
  authorName  String
  authorTitle String?
  authorImage String?
  content     String
  rating      Int       @default(5)
  carModel    String?
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime

  @@index([isPublished])
}

model User {
  id               String          @id
  email            String          @unique
  emailVerified    DateTime?
  name             String?
  phone            String?
  image            String?
  dateOfBirth      DateTime?
  licenseNumber    String?
  licenseExpiry    DateTime?
  licenseImageUrl  String?
  licenseVerified  Boolean         @default(false)
  addressLine1     String?
  addressLine2     String?
  city             String?
  state            String?
  postalCode       String?
  country          String?
  role             Role            @default(CUSTOMER)
  status           UserStatus      @default(ACTIVE)
  isVerified       Boolean         @default(false)
  acceptedTermsAt  DateTime?
  stripeCustomerId String?         @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  Account          Account[]
  Booking          Booking[]
  Notification     Notification[]
  PaymentMethod    PaymentMethod[]
  Session          Session[]

  @@index([email])
  @@index([status])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WebhookEventLog {
  id              String    @id
  eventId         String    @unique
  eventType       String
  payload         Json
  processed       Boolean   @default(false)
  processingError String?
  attemptCount    Int       @default(0)
  processedAt     DateTime?
  createdAt       DateTime  @default(now())

  @@index([createdAt])
  @@index([eventType])
  @@index([processed])
}

enum AddOnCategory {
  INSURANCE
  EQUIPMENT
  SERVICE
  EXPERIENCE
}

enum BillingPlan {
  PERFORMANCE
  STARTER
  PRO
  DIY
}

enum BodyType {
  SEDAN
  COUPE
  CONVERTIBLE
  SUV
  HATCHBACK
  WAGON
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum CarCategory {
  LUXURY
  SPORT
  SUPERCAR
  SUV
  CONVERTIBLE
  ELECTRIC
}

enum CarStatus {
  ACTIVE
  MAINTENANCE
  RETIRED
  COMING_SOON
}

enum ConnectOnboardingStatus {
  PENDING
  INCOMPLETE
  COMPLETE
  RESTRICTED
}

enum DepositStatus {
  AUTHORIZED
  CAPTURED
  RELEASED
  CANCELED
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum DisputeStatus {
  WARNING_NEEDS_RESPONSE
  WARNING_UNDER_REVIEW
  WARNING_CLOSED
  NEEDS_RESPONSE
  UNDER_REVIEW
  CHARGE_REFUNDED
  WON
  LOST
}

enum DrivetrainType {
  FWD
  RWD
  AWD
  FOUR_WD
}

enum FuelType {
  PETROL
  DIESEL
  HYBRID
  ELECTRIC
  PLUG_IN_HYBRID
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  INSPECTION
  CLEANING
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  PAYMENT_RECEIPT
  PICKUP_REMINDER
  RETURN_REMINDER
  MARKETING
  SYSTEM
}

enum PaymentMethodType {
  CARD
  CASH
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  PARTIALLY_REFUNDED
  REFUNDED
  FAILED
}

enum PaymentTransactionStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum PaymentType {
  DEPOSIT
  RENTAL_FEE
  EXTRA_CHARGE
  REFUND
  DAMAGE_CHARGE
}

enum PickupType {
  SHOWROOM
  DELIVERY
}

enum PriceType {
  PER_DAY
  PER_BOOKING
  PER_KM
}

enum Role {
  CUSTOMER
  STAFF
  ADMIN
  SUPER_ADMIN
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
  SEMI_AUTOMATIC
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}
